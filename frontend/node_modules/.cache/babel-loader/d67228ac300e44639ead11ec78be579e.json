{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport store from './logic/store';\nimport axios from 'axios';\nexport var apiCall = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(route) {\n    var authorize,\n        method,\n        payload,\n        state,\n        server,\n        dataRoutes,\n        jwt,\n        response,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            authorize = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n            method = _args.length > 2 && _args[2] !== undefined ? _args[2] : 'get';\n            payload = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n            state = store.getState();\n            method = method.toLowerCase().trim();\n            server = 'http://127.0.0.1:5000';\n            dataRoutes = ['post', 'put'];\n            jwt = authorize ? state.jwt : undefined;\n            _context.next = 10;\n            return axios({\n              method: method,\n              url: server + route,\n              data: dataRoutes.includes(method) ? payload : undefined,\n              headers: authorize ? {\n                'Authorization': \"Bearer \".concat(jwt)\n              } : undefined\n            });\n\n          case 10:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function apiCall(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}